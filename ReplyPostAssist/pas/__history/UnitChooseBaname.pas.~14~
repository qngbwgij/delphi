unit UnitChooseBaname;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, RzButton, MemDS, DBAccess, Uni,
  Vcl.Grids, Vcl.DBGrids, RzDBGrid, Vcl.ExtCtrls, RzPanel, cxGraphics,
  cxControls, cxLookAndFeels, cxLookAndFeelPainters, dxSkinsCore, dxSkinBlack,
  dxSkinBlue, dxSkinBlueprint, dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom,
  dxSkinDarkSide, dxSkinDevExpressDarkStyle, dxSkinDevExpressStyle, dxSkinFoggy,
  dxSkinGlassOceans, dxSkinHighContrast, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMetropolis,
  dxSkinMetropolisDark, dxSkinMoneyTwins, dxSkinOffice2007Black,
  dxSkinOffice2007Blue, dxSkinOffice2007Green, dxSkinOffice2007Pink,
  dxSkinOffice2007Silver, dxSkinOffice2010Black, dxSkinOffice2010Blue,
  dxSkinOffice2010Silver, dxSkinOffice2013DarkGray, dxSkinOffice2013LightGray,
  dxSkinOffice2013White, dxSkinOffice2016Colorful, dxSkinOffice2016Dark,
  dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic, dxSkinSharp, dxSkinSharpPlus,
  dxSkinSilver, dxSkinSpringTime, dxSkinStardust, dxSkinSummer2008,
  dxSkinTheAsphaltWorld, dxSkinsDefaultPainters, dxSkinValentine,
  dxSkinVisualStudio2013Blue, dxSkinVisualStudio2013Dark,
  dxSkinVisualStudio2013Light, dxSkinVS2010, dxSkinWhiteprint,
  dxSkinXmas2008Blue, cxStyles, dxSkinscxPCPainter, cxCustomData, cxFilter,
  cxData, cxDataStorage, cxEdit, cxNavigator, cxDBData, cxGridLevel, cxClasses,
  cxGridCustomView, cxGridCustomTableView, cxGridTableView, cxGridDBTableView,
  cxGrid, UPublicEX, RzRadChk, Vcl.StdCtrls, Vcl.Mask, RzEdit,
  RzLabel, UGlobalPublic_Function, cxImage, uThrdPoolClass,
  UinstanceHua, cxImageComboBox, System.ImageList, Vcl.ImgList,
  IdHTTP, IdSSLOpenSSL, System.RegularExpressions, SQLiteTable3, MSHTML,
  Winapi.ActiveX, Vcl.Samples.Spin;

type
  TFormChooseBaname = class(TForm)
    RzPanel1: TRzPanel;
    RzPanel2: TRzPanel;
    UniDataSource1: TUniDataSource;
    UniConnection1: TUniConnection;
    UniQuery1: TUniQuery;
    RzButton1: TRzButton;
    cxGrid1DBTableView1: TcxGridDBTableView;
    cxGrid1Level1: TcxGridLevel;
    cxGrid1: TcxGrid;
    Timer1: TTimer;
    RzPanelLoading: TRzPanel;
    cxGrid1DBTableView1Column1: TcxGridDBColumn;
    cxGrid1DBTableView1Column2: TcxGridDBColumn;
    cxGrid1DBTableView1Column3: TcxGridDBColumn;
    cxGrid1DBTableView1Column4: TcxGridDBColumn;
    RzLabel1: TRzLabel;
    RzEditName: TRzEdit;
    RzLabel2: TRzLabel;
    RzEditFollowStart: TRzEdit;
    RzEditFollowEnd: TRzEdit;
    RzLabel3: TRzLabel;
    RzLabel4: TRzLabel;
    RzEditPostcStart: TRzEdit;
    RzLabel5: TRzLabel;
    RzEditPostcEnd: TRzEdit;
    RzCheckBoxHighVague: TRzCheckBox;
    RzButtonSearch: TRzButton;
    cxGrid1DBTableView1Column5: TcxGridDBColumn;
    RzCheckBoxTillAll: TRzCheckBox;
    RzButtonUpdate: TRzButton;
    cxGrid1DBTableView1Column6: TcxGridDBColumn;
    ImageList1: TImageList;
    RzLabel6: TRzLabel;
    SpinEditPostCount: TSpinEdit;
    RzLabel7: TRzLabel;
    procedure RzButton1Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure RzButtonSearchClick(Sender: TObject);
    procedure cxGrid1DBTableView1Column5GetDisplayText(
      Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
      var AText: string);
    procedure RzButtonUpdateClick(Sender: TObject);
  private
    { Private declarations }
    procedure ShowProgressInmemo(var Msg: TMessage); message WM_USER + 110;
  public
    { Public declarations }
    applicationha: THandle;
    TiebaList: string;
  end;

type
  TMaintainTiebaBasicInfo = class(TBusiaction)
  public
    SplitDirectory: string;
    SourceDBaseDire: string;
    mainhan: THandle;
    LinshiFormChooseBaname: TFormChooseBaname;
//    cxGrid1DBTableView: TcxGridDBTableView;
//    UniConnection: TUniConnection;
    procedure Operate; override;
  end;

var
  FormChooseBaname: TFormChooseBaname;
  publicsql: string;
const
  limitC: string = '200';

implementation

{$R *.dfm}

procedure TFormChooseBaname.cxGrid1DBTableView1Column5GetDisplayText(
  Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
  var AText: string);
begin
  AText := IntToStr(ARecord.Index + 1);
end;

procedure TFormChooseBaname.FormCreate(Sender: TObject);
var
  Linshi_String: string;
  sSQL: string;
begin
  Linshi_String := 'Provider Name=SQLite;';
  //Linshi_String := Linshi_String + 'Database=' + ExtractFilepath(application.exename) + DbName1 + ';';
  Linshi_String := Linshi_String + 'Database=' + ':memory:' + ';';
  Linshi_String := Linshi_String + 'Encryption Key=SYNCHRONOUSNORMAL;';
  Linshi_String := Linshi_String + 'Client Library=' + sqlitedllpath + ';';
  Linshi_String := Linshi_String + 'Use Unicode=false;';
  Linshi_String := Linshi_String + 'Login Prompt=False';

  UniConnection1.ConnectString := Linshi_String;

  UniConnection1.Password := 'SYNCHRONOUSNORMAL';

  UniConnection1.Connected := True;
  UniConnection1.Connected := False;



    sSQL :=
    //'DROP TABLE IF EXISTS SeeLiangTieziList;' +
    'CREATE TABLE IF NOT EXISTS TieBa_BasicInfoEX (' +
    //'CREATE TABLE IF NOT EXISTS SeeLiangTieziList (' +
    '[TieBaMing] TEXT NOT NULL,' +
    '[FollowerCount] INTEGER NOT NULL,' +
    '[AllPostCount] INTEGER NOT NULL,' +
    '[LastUpdateTime] TEXT,' +
    '[UpdateOrNot] INTEGER NOT NULL,' +
    'PRIMARY KEY ([TieBaMing]));';



    UniConnection1.ExecSQL(sSQL);

  Application.Handle := applicationha;
  SetWindowPos(Self.Handle,HWND_TOPMOST,0,0,0,0,SWP_NOMOVE or SWP_NOSIZE);
  SetWindowPos(Self.Handle,HWND_NOTOPMOST, 0, 0, 0, 0, SWP_NOSIZE or SWP_NOMOVE);
  //Self.FormStyle := fsStayOnTop;

  Timer1.Enabled := True;

end;

procedure TFormChooseBaname.RzButton1Click(Sender: TObject);
var
  SelectC, i, j: Integer;
  LinshiValue, Linshistr, Linshistr1: string;
begin
  Linshistr := '';
  SelectC := cxGrid1DBTableView1.DataController.RowCount;
  if SelectC < 1 then Exit;
  SelectC := cxGrid1DBTableView1.DataController.GetSelectedCount;
  if SelectC < 1 then Exit;

  //cxGrid1DBTableView1.DataController.Select;
//  for I := 0 to SelectC - 1 do
//  begin
//    Linshistr1 := cxGrid1DBTableView1.DataController.focus
//
//    Linshistr := Linshistr + ',' + RzDBGrid1.SelectedRows.
//  end;

   for I := 0 to SelectC - 1 do
   begin
     J := cxGrid1DBTableView1.DataController.GetSelectedRowIndex(I);
     LinshiValue :=
     cxGrid1DBTableView1.DataController.GetValue(J, cxGrid1DBTableView1.FindItemByName('cxGrid1DBTableView1Column1').Index);
     LinshiValue := Trim(LinshiValue);
     if LinshiValue <> '' then
       Linshistr := Linshistr + '|' + LinshiValue;
   end;
   if Linshistr <> '' then Linshistr := Copy(Linshistr, 2, Length(Linshistr) - 1);


     //LinshiValue := Trim(GetRowValue(GetRowInfo(J),FieldByName('TieBaMing').Index));
     //ShowMessage(VarToStr(cxGrid1DBTableView1.DataController.GetValue(J, 0)));  //排序过滤后取值异常

     //ShowMessage();  //排序过滤后取值正常



  TiebaList := Linshistr;
  Self.ModalResult := mrOk;
end;

procedure TFormChooseBaname.RzButtonSearchClick(Sender: TObject);
var
  WhereSqlstri: string;
  legh, I: Integer;
  Linshtr, Trimstr: string;
  sSQL: string;
begin
  RzPanelLoading.Visible := True;
  delay(1000);
  UniQuery1.DisableControls;

  cxGrid1DBTableView1.DataController.BeginUpdate;
  EnterCriticalSection(CS);
  try
    //QuerySqlInuni(UniQuery1, 'select * from TieBa_BasicInfo ORDER BY FollowerCount asc;');
    //UniQuery1.Filtered := False;

    WhereSqlstri := '1=1 ';
    Trimstr := Trim(RzEditName.Text);
    if Trimstr <> '' then
    begin
      legh := Length(Trimstr);
      if RzCheckBoxHighVague.Checked and (legh > 1) then
      begin
        Linshtr := '';
        for I := 1 to legh do
        begin
          Linshtr := Linshtr + '%' + Trimstr[I];
        end;
        Linshtr := Linshtr + '%';
        WhereSqlstri := WhereSqlstri + ' and TieBaMing like ''' + Linshtr + '''';
      end
      else
      begin
        WhereSqlstri := WhereSqlstri + ' and TieBaMing like ''%' + Trimstr + '%''';
      end;
    end;
    if StrToInt64Def(Trim(RzEditFollowStart.Text), 0) > 0 then
      WhereSqlstri := WhereSqlstri + ' and FollowerCount>=' + Trim(RzEditFollowStart.Text);
    if StrToInt64Def(Trim(RzEditFollowEnd.Text), 0) > 0 then
      WhereSqlstri := WhereSqlstri + ' and FollowerCount<=' + Trim(RzEditFollowEnd.Text);
    if StrToInt64Def(Trim(RzEditPostcStart.Text), 0) > 0 then
      WhereSqlstri := WhereSqlstri + ' and AllPostCount>=' + Trim(RzEditPostcStart.Text);
    if StrToInt64Def(Trim(RzEditPostcEnd.Text), 0) > 0 then
      WhereSqlstri := WhereSqlstri + ' and AllPostCount<=' + Trim(RzEditPostcEnd.Text);


    UniConnection1.ExecSQL('delete from TieBa_BasicInfoEX');
    //UniConnection1.ExecSQL('update sqlite_sequence SET seq = 0 where name =''TieBa_BasicInfoEX''');


//    publicsql := 'select * from TieBa_BasicInfo where ' + WhereSqlstri +
//    ' ORDER BY FollowerCount asc limit ' + limitC;
//
//
//delete from TableName;  //清空数据
//update sqlite_sequence SET seq = 0 where name ='TableName';//自增长ID为0


    publicsql := 'select *, 0 from [hr].TieBa_BasicInfo where ' + WhereSqlstri +
    ' ORDER BY FollowerCount asc limit ' + limitC;

    UniConnection1.ExecSQL('ATTACH DATABASE "' + ExtractFilepath(application.exename) + DbName1 + '" AS hr KEY ' + QuotedStr('SYNCHRONOUSNORMAL'));
    sSQL := 'insert into TieBa_BasicInfoEX ' + publicsql;//'select *, 0 from [hr].TieBa_BasicInfo ORDER BY FollowerCount asc limit ' + limitC;
    UniConnection1.ExecSQL(sSQL);
    UniConnection1.ExecSQL('DETACH DATABASE "hr"');
    //UniQuery1.Filtered := False;
    publicsql := 'select * from TieBa_BasicInfoEX ORDER BY FollowerCount asc limit ' + limitC;
    //publicsql := 'select *, 0 as UpdateOrNot from [hr].TieBa_BasicInfo ORDER BY FollowerCount asc limit ' + limitC;
    QuerySqlInuni(UniQuery1, publicsql);


    //QuerySqlInuni(UniQuery1, publicsql);
    //UniQuery1.Filter := WhereSqlstri;
    //UniQuery1.Filtered := False;
  finally
    LeaveCriticalSection(CS);
    cxGrid1DBTableView1.DataController.EndUpdate;
    UniQuery1.EnableControls;
    RzPanelLoading.Visible := False;
  end;
end;

procedure TFormChooseBaname.RzButtonUpdateClick(Sender: TObject);
var
  VarHint: string;

  AATProxyEX: TInstActionProxy;


  MaintainTiebaBasicInfo: TMaintainTiebaBasicInfo;
begin
  cxGrid1DBTableView1Column6.Visible := True;


  AATProxyEX := TInstActionProxy.create;
  AATProxyEX.BldThreadPool(1); //创建6个线程用来加载表   55    90    120
  AATProxyEX.StartWork; //开始工作

  VarHint := RzButtonUpdate.Caption;
  RzButtonUpdate.Caption := '';
  with THandleWaitings.create(100) do
  try
      iniWaiting(RzButtonUpdate, 7, 7);


      MaintainTiebaBasicInfo := TMaintainTiebaBasicInfo.create;
      MaintainTiebaBasicInfo.mainhan := Self.Handle;

      MaintainTiebaBasicInfo.LinshiFormChooseBaname := Self;
//      MaintainTiebaBasicInfo.cxGrid1DBTableView := cxGrid1DBTableView1;
//      MaintainTiebaBasicInfo.UniConnection :=  UniConnection1;

//      MaintainTiebaBasicInfo.SplitDirectory := Trim(RzEditObjectPath.Text);
//      MaintainTiebaBasicInfo.SourceDBaseDire := Trim(RzEditSourceDir.Text);
      AATProxyEX.AddAction(MaintainTiebaBasicInfo);
      AATProxyEX.WaitforThreadsFinishedWithProcessMsg;

  finally
    finalWaiting;
    RzButtonUpdate.Caption := VarHint;

    AATProxyEX.free;

    cxGrid1DBTableView1Column6.Visible := False;
  end;
end;

procedure TFormChooseBaname.ShowProgressInmemo(var Msg: TMessage);
begin
  UniQuery1.DisableControls;
  cxGrid1DBTableView1.DataController.BeginUpdate;
  try
    UniQuery1.SQLRefresh.Clear;
    UniQuery1.SQLRefresh.Add('select * from TieBa_BasicInfoEX ORDER BY FollowerCount asc limit ' + limitC);
    UniQuery1.Refresh;
  finally
    cxGrid1DBTableView1.DataController.EndUpdate;
    UniQuery1.EnableControls;
  end;

end;

procedure TFormChooseBaname.Timer1Timer(Sender: TObject);
var
  sSQL: string;
begin
  Timer1.Enabled := False;
  RzPanelLoading.Visible := True;
  UniQuery1.DisableControls;
  cxGrid1DBTableView1.DataController.BeginUpdate;
  EnterCriticalSection(CS);
  try
    UniConnection1.ExecSQL('ATTACH DATABASE "' + ExtractFilepath(application.exename) + DbName1 + '" AS hr KEY ' + QuotedStr('SYNCHRONOUSNORMAL'));
    sSQL := 'insert into TieBa_BasicInfoEX ' + 'select *, 0 from [hr].TieBa_BasicInfo ORDER BY FollowerCount asc limit ' + limitC;
    UniConnection1.ExecSQL(sSQL);
    UniConnection1.ExecSQL('DETACH DATABASE "hr"');
    //UniQuery1.Filtered := False;
    publicsql := 'select * from TieBa_BasicInfoEX ORDER BY FollowerCount asc limit ' + limitC;
    //publicsql := 'select *, 0 as UpdateOrNot from [hr].TieBa_BasicInfo ORDER BY FollowerCount asc limit ' + limitC;
    QuerySqlInuni(UniQuery1, publicsql);
    //UniConnection1.ExecSQL('DETACH DATABASE "hr"');
    //UniQuery1.Filtered := False;
  finally
    LeaveCriticalSection(CS);
    cxGrid1DBTableView1.DataController.EndUpdate;
    UniQuery1.EnableControls;
    RzPanelLoading.Visible := False;
  end;
end;

{ TMaintainTiebaBasicInfo }

procedure TMaintainTiebaBasicInfo.Operate;
var
  cou, I, J, SelectC: Integer;
  url_s: string;
  Linshst: string;
  Foollowc, Postcc: string;



  HTTPCon: TIdHTTP;
//   AntiFreeze : TIdAntiFreeze;
  SSLIOHandlerSocketOpenSSL: TIdSSLIOHandlerSocketOpenSSL;

  respnsestr: string;
  //ResponseStream1: TStringStream;
  linshiURL: string;

  linshiStr: string;
  match: TMatch;
  matchs: TMatchCollection;
  LinshiPattern, LinshiPlanScheme_TopicContent: string;

  slDataBase: TSQLiteDatabase;

  sSQL: string;

  Parent_PostID, Linshi_PostID: string;
  Linshi_Title, Linshi_Content: string;
  Linshi_BaName, Linshi_CreateTime: string;
  Lerror: string;


  V: OleVariant;
  Doc: IHTMLDocument2;
  Doc1, Doc2: IHTMLDocument7;

  Doc3: IHTMLDocument3;
  Doc6: IHTMLDocument6;
  ElementCollection1, ElementCollection2: IHTMLElementCollection;
  ElementCollection3, ElementCollection4: IHTMLElementCollection;

  HTMLElement1, HTMLElement2: IHTMLElement;
  innerHTMLStr: string;

  //table: IHTMLTABLE;


  slDBpath, Linshi_String: string;
  NOwtime: TDateTime;
begin
  SelectC := LinshiFormChooseBaname.cxGrid1DBTableView1.DataController.RowCount;
  if SelectC < 1 then Exit;
  for I := 0 to SelectC - 1 do
  begin
    Linshi_baname :=
    LinshiFormChooseBaname.cxGrid1DBTableView1.DataController.GetValue(I, LinshiFormChooseBaname.cxGrid1DBTableView1.FindItemByName('cxGrid1DBTableView1Column1').Index);
    Linshi_baname := Trim(Linshi_baname);
    if Linshi_baname = '' then Continue;
    //Linshi_baname := '越南';
    url_s := 'https://tieba.baidu.com/f?ie=utf-8&kw=' + Linshi_baname;// ' %E8%B6%8A%E5%8D%97';
    //url_s := urlencode(url_s);
//    url_s := 'https://tieba.baidu.com/f?ie=utf-8&kw=' + Linshi_baname + '&fr=search';
//    url_s := urlencode(url_s);

      try
                 { AntiFreeze }
      //           AntiFreeze := TIdAntiFreeze.Create(NIL);
      //           AntiFreeze.Active := true;
                 { Create & Set IdHTTP properties }

          HTTPCon := TIdHTTP.Create(NIL);


          SSLIOHandlerSocketOpenSSL := TIdSSLIOHandlerSocketOpenSSL.Create(nil);

          try
            HTTPCon.IOHandler := SSLIOHandlerSocketOpenSSL;


            HTTPCon.Request.ContentType := 'application/x-www-form-urlencoded';
                //  SourceIdHttp.Request.CharSet := 'utf-8';
                //  SourceIdHttp.Request.ContentEncoding := 'utf-8'; //可以省略，目前感觉没用
            HTTPCon.Request.UserAgent := 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36';

            HTTPCon.HTTPOptions := HTTPCon.HTTPOptions + [hoKeepOrigProtocol]; //必须有这行才使设置协议版本生效
                //HTTPCon.ProtocolVersion := pv1_1;

                 //Pri_IP, Pri_Port, Pri_username, Pri_Password: string;

      //           HTTPCon.ProxyParams.ProxyUsername := Pri_username;
      //           HTTPCon.ProxyParams.ProxyPassword := Pri_Password;

            HTTPCon.HandleRedirects := true;
            //HTTPCon.ConnectTimeout := 1000;
            //HTTPCon.ReadTimeout := 1000;
            HTTPCon.ConnectTimeout := 5000;
            HTTPCon.ReadTimeout := 6000;


            HTTPCon.ProxyParams.ProxyServer := '';
            HTTPCon.ProxyParams.ProxyPort := 0;
            HTTPCon.ProxyParams.BasicAuthentication := False;


            HTTPCon.Request.Connection := 'close';
//
//            linshiURL :=
//            'https://tieba.baidu.com/f/search/res?isnew=1&kw=' +
//            Trim(BaName) +
//            '&qw=' +
//            //%D5%D2%C0%CF%C6%C5
//            Trim(KeyWord) +
//            '&rn=20&un=&only_thread=1&sm=1&sd=&ed=&pn=' + IntToStr(WhichPage);

//            linshiURL := urlencode(linshiURL);

            //ResponseStream1 := TStringStream.Create('', TEncoding.UTF8);
            //ResponseStream1 := TStringStream.Create('', TEncoding.BigEndianUnicode);
            //try

              //Lerror := '1';
      //        HTTPCon.Get(linshiURL, ResponseStream1);
      //
      //        Lerror := '2';
      //        respnsestr := ResponseStream1.DataString;

              respnsestr := HTTPCon.Get(url_s);
            //finally
               //ResponseStream1.free;
            //end;
            //HTTPCon.Head(sURL);
            //HandleOnePost();


            //respnsestr := Copy(respnsestr, Pos('thread_top_list_folder', respnsestr), Pos('thread_list_bottom clearfix', respnsestr)); //card_numLabel

            respnsestr := Copy(respnsestr, Pos('card_numLabel', respnsestr) - 20, 200); //card_numLabel


            Doc := coHTMLDocument.Create as IHTMLDocument2; // create IHTMLDocument2 instance
            V := VarArrayCreate([0,0],varVariant);
            V[0] := respnsestr;
            Doc.Write(PSafeArray(TVarData(v).VArray)); // write data from IdHTTP



            Doc1 := Doc as IHTMLDocument7;
//            Doc3 := Doc as IHTMLDocument3;
//            Doc6 := Doc as IHTMLDocument6;


//            ShowMessageEX(Doc3.getElementById('thread_list').innerText);
//            ShowMessageEX(((Doc6.getElementById('thread_list')) as IHTMLElement).innerText);

            //ShowMessageEX(IntToStr(Doc1.all.length));
//            ElementCollection1 := Doc1.all;
//            for J := 0 to ElementCollection1.length - 1 do
//            begin
////              linshiStr := (ElementCollection1.item(J, 0) as IHTMLElement).innerHTML;
////              ElementCollection2 := (ElementCollection1.item(J, 0) as IHTMLElement6).getElementsByClassName('card_menNum');
////              if ElementCollection2.length > 0 then
////                 ShowMessage(Copy(linshiStr, Pos('card_menNum', linshiStr) - 10, Pos('card_menNum', linshiStr) + 10));
//
//              linshiStr := (ElementCollection1.item(J, 0) as IHTMLElement).innerText;
//              if Pos('card_menNum', linshiStr) > 0 then
//              begin
//                 ShowMessageEX(Copy(linshiStr, Pos('card_menNum', linshiStr) - 10, Pos('card_menNum', linshiStr) + 10));
//              end;
//
//              linshiStr := (ElementCollection1.item(J, 0) as IHTMLElement).innerHTML;
//              if Pos('card_menNum', linshiStr) > 0 then
//              begin
//                 ShowMessageEX(Copy(linshiStr, Pos('card_menNum', linshiStr) - 10, Pos('card_menNum', linshiStr) + 10));
//              end;
//              linshiStr := (ElementCollection1.item(J, 0) as IHTMLElement).outerHTML;
//              if Pos('card_menNum', linshiStr) > 0 then
//              begin
//                 ShowMessageEX(Copy(linshiStr, Pos('card_menNum', linshiStr) - 10, Pos('card_menNum', linshiStr) + 10));
//              end;
//            end;

            // j_thread_list clearfix
//            ElementCollection1 := Doc1.getElementsByClassName('j_thread_list clearfix');
//            ShowMessageEX(IntToStr(ElementCollection1.length));



            ElementCollection1 := Doc1.getElementsByClassName('card_menNum');
            Foollowc := '';
            if ElementCollection1.length > 0 then
            begin
              Linshst := (ElementCollection1.item(0, 0) as IHTMLElement).innerText;
              //Foollowc, Postcc
              Foollowc := StringReplace(Trim(Linshst), ',', '', [rfReplaceAll]);
            end;

            Postcc := '';
            ElementCollection1 := Doc1.getElementsByClassName('card_infoNum');
            if ElementCollection1.length > 0 then
            begin
              Linshst := (ElementCollection1.item(0, 0) as IHTMLElement).innerText;
              //Foollowc, Postcc
              Postcc := StringReplace(Trim(Linshst), ',', '', [rfReplaceAll]);
              //TheRealTimeTime_Datetime
            end;
            NOwtime := TheRealTimeTime_Datetime;
            if (Foollowc <> '') and (Postcc <> '') then
            begin
              EnterCriticalSection(CS);

              LinshiFormChooseBaname.UniConnection1.ExecSQL('ATTACH DATABASE "' + ExtractFilepath(application.exename) + DbName1 + '" AS hr KEY ' + QuotedStr('SYNCHRONOUSNORMAL'));
              sSQL := 'update [hr].TieBa_BasicInfo set FollowerCount=' + Foollowc +
              ', AllPostCount=' + Postcc +
              ', LastUpdateTime=' + QuotedStr(FormatDateTime('yyyy-mm-dd hh:mm:ss', NOwtime)) +
              ' where TieBaMing=' + QuotedStr(Linshi_baname);
              LinshiFormChooseBaname.UniConnection1.ExecSQL(sSQL);

//              sSQL := 'insert into TieBa_BasicInfoEX ' + publicsql;//'select *, 0 from [hr].TieBa_BasicInfo ORDER BY FollowerCount asc limit ' + limitC;
//              UniConnection1.ExecSQL(sSQL);
              LinshiFormChooseBaname.UniConnection1.ExecSQL('DETACH DATABASE "hr"');


              sSQL := 'update TieBa_BasicInfoEX set FollowerCount=' + Foollowc +
              ', AllPostCount=' + Postcc +
              ', LastUpdateTime=' + QuotedStr(FormatDateTime('yyyy-mm-dd hh:mm:ss', NOwtime)) +
              ', UpdateOrNot=1' +
              ' where TieBaMing=' + QuotedStr(Linshi_baname);
              LinshiFormChooseBaname.UniConnection1.ExecSQL(sSQL);

//              sSQL := 'update TieBa_BasicInfo set FollowerCount=' + Foollowc +
//              ', AllPostCount=' + Postcc +
//              ', LastUpdateTime=' + QuotedStr(FormatDateTime('yyyy-mm-dd hh:mm:ss', TheRealTimeTime_Datetime)) +
//              ' where TieBaMing=' + QuotedStr(Linshi_baname);
//
//
//              LinshiFormChooseBaname.UniConnection1.ExecSQL(sSQL);
              LeaveCriticalSection(CS);
              SendMessage(mainhan, WM_USER + 110, 0, 0);
            end;


          finally

            if HTTPCon.Connected then
              HTTPCon.Disconnect;

            HTTPCon.IOHandler := nil;

            FreeAndNil(HTTPCon);

            FreeAndNil(SSLIOHandlerSocketOpenSSL);

                 //if Assigned(AntiFreeze) then FreeAndNil(AntiFreeze);
          end;
      except on E: Exception do
        begin
              Lerror := E.Message;

//
//              EnterCriticalSection(SaveOnlinesearchedDB);
//              try
//
//
//                        sSQL := 'replace into SeeLiangTieziList (TieziID, TieBaName, TitleName, TieZiContent, Createtime, LastUpdateTime, DeleteOrNot, CanReplyOrNot) ' +
//                        'values (' + IntToStr(ii)
//                         + ', ' +  QuotedStr(BaName)
//                         + ', ' +  QuotedStr(Lerror)
//                         + ', ' +  QuotedStr(KeyWord)
//                         + ', ' +  QuotedStr(IntToStr(WhichPage))
//                         + ', ' + QuotedStr(FormatDateTime('yyyy-mm-dd hh:mm:ss', Now))
//                         + ', 1, 100)';
//                        LinshiMemoryTableUniConnection.ExecSQL(sSQL);
//
//              finally
//                LeaveCriticalSection(SaveOnlinesearchedDB);
//              end;
//              SendMessage(AppMainHangle, WM_USER + 102, WPARAM(PChar(KeyWord + '|' + IntToStr(WhichPage) + '|' + Lerror)), LPARAM(PChar(BaName)));
        end;
      end;
  end;

end;

end.
