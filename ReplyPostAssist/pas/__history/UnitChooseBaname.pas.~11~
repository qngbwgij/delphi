unit UnitChooseBaname;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, RzButton, MemDS, DBAccess, Uni,
  Vcl.Grids, Vcl.DBGrids, RzDBGrid, Vcl.ExtCtrls, RzPanel, cxGraphics,
  cxControls, cxLookAndFeels, cxLookAndFeelPainters, dxSkinsCore, dxSkinBlack,
  dxSkinBlue, dxSkinBlueprint, dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom,
  dxSkinDarkSide, dxSkinDevExpressDarkStyle, dxSkinDevExpressStyle, dxSkinFoggy,
  dxSkinGlassOceans, dxSkinHighContrast, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMetropolis,
  dxSkinMetropolisDark, dxSkinMoneyTwins, dxSkinOffice2007Black,
  dxSkinOffice2007Blue, dxSkinOffice2007Green, dxSkinOffice2007Pink,
  dxSkinOffice2007Silver, dxSkinOffice2010Black, dxSkinOffice2010Blue,
  dxSkinOffice2010Silver, dxSkinOffice2013DarkGray, dxSkinOffice2013LightGray,
  dxSkinOffice2013White, dxSkinOffice2016Colorful, dxSkinOffice2016Dark,
  dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic, dxSkinSharp, dxSkinSharpPlus,
  dxSkinSilver, dxSkinSpringTime, dxSkinStardust, dxSkinSummer2008,
  dxSkinTheAsphaltWorld, dxSkinsDefaultPainters, dxSkinValentine,
  dxSkinVisualStudio2013Blue, dxSkinVisualStudio2013Dark,
  dxSkinVisualStudio2013Light, dxSkinVS2010, dxSkinWhiteprint,
  dxSkinXmas2008Blue, cxStyles, dxSkinscxPCPainter, cxCustomData, cxFilter,
  cxData, cxDataStorage, cxEdit, cxNavigator, cxDBData, cxGridLevel, cxClasses,
  cxGridCustomView, cxGridCustomTableView, cxGridTableView, cxGridDBTableView,
  cxGrid, UinstanceHua, UPublicEX, RzRadChk, Vcl.StdCtrls, Vcl.Mask, RzEdit,
  RzLabel, UGlobalPublic_Function;

type
  TFormChooseBaname = class(TForm)
    RzPanel1: TRzPanel;
    RzPanel2: TRzPanel;
    UniDataSource1: TUniDataSource;
    UniConnection1: TUniConnection;
    UniQuery1: TUniQuery;
    RzButton1: TRzButton;
    cxGrid1DBTableView1: TcxGridDBTableView;
    cxGrid1Level1: TcxGridLevel;
    cxGrid1: TcxGrid;
    Timer1: TTimer;
    RzPanelLoading: TRzPanel;
    cxGrid1DBTableView1Column1: TcxGridDBColumn;
    cxGrid1DBTableView1Column2: TcxGridDBColumn;
    cxGrid1DBTableView1Column3: TcxGridDBColumn;
    cxGrid1DBTableView1Column4: TcxGridDBColumn;
    RzLabel1: TRzLabel;
    RzEditName: TRzEdit;
    RzLabel2: TRzLabel;
    RzEditFollowStart: TRzEdit;
    RzEditFollowEnd: TRzEdit;
    RzLabel3: TRzLabel;
    RzLabel4: TRzLabel;
    RzEditPostcStart: TRzEdit;
    RzLabel5: TRzLabel;
    RzEditPostcEnd: TRzEdit;
    RzCheckBoxHighVague: TRzCheckBox;
    RzButtonSearch: TRzButton;
    cxGrid1DBTableView1Column5: TcxGridDBColumn;
    RzCheckBoxTillAll: TRzCheckBox;
    RzButtonUpdate: TRzButton;
    procedure RzButton1Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure RzButtonSearchClick(Sender: TObject);
    procedure cxGrid1DBTableView1Column5GetDisplayText(
      Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
      var AText: string);
  private
    { Private declarations }
  public
    { Public declarations }
    applicationha: THandle;
    TiebaList: string;
  end;

var
  FormChooseBaname: TFormChooseBaname;
const
  limitC: string = '200';

implementation

{$R *.dfm}

procedure TFormChooseBaname.cxGrid1DBTableView1Column5GetDisplayText(
  Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
  var AText: string);
begin
  AText := IntToStr(ARecord.Index + 1);
end;

procedure TFormChooseBaname.FormCreate(Sender: TObject);
var
  Linshi_String: string;
begin
  Linshi_String := 'Provider Name=SQLite;';
  Linshi_String := Linshi_String + 'Database=' + ExtractFilepath(application.exename) + DbName1 + ';';
  Linshi_String := Linshi_String + 'Encryption Key=SYNCHRONOUSNORMAL;';
  Linshi_String := Linshi_String + 'Client Library=' + sqlitedllpath + ';';
  Linshi_String := Linshi_String + 'Use Unicode=false;';
  Linshi_String := Linshi_String + 'Login Prompt=False';

  UniConnection1.ConnectString := Linshi_String;

  UniConnection1.Password := 'SYNCHRONOUSNORMAL';

  UniConnection1.Connected := True;
  UniConnection1.Connected := False;

  Application.Handle := applicationha;
  SetWindowPos(Self.Handle,HWND_TOPMOST,0,0,0,0,SWP_NOMOVE or SWP_NOSIZE);
  SetWindowPos(Self.Handle,HWND_NOTOPMOST, 0, 0, 0, 0, SWP_NOSIZE or SWP_NOMOVE);
  //Self.FormStyle := fsStayOnTop;

  Timer1.Enabled := True;

end;

procedure TFormChooseBaname.RzButton1Click(Sender: TObject);
var
  SelectC, i, j: Integer;
  LinshiValue, Linshistr, Linshistr1: string;
begin
  Linshistr := '';
  SelectC := cxGrid1DBTableView1.DataController.RowCount;
  if SelectC < 1 then Exit;
  SelectC := cxGrid1DBTableView1.DataController.GetSelectedCount;
  if SelectC < 1 then Exit;

  //cxGrid1DBTableView1.DataController.Select;
//  for I := 0 to SelectC - 1 do
//  begin
//    Linshistr1 := cxGrid1DBTableView1.DataController.focus
//
//    Linshistr := Linshistr + ',' + RzDBGrid1.SelectedRows.
//  end;

   for I := 0 to SelectC - 1 do
   begin
     J := cxGrid1DBTableView1.DataController.GetSelectedRowIndex(I);
     LinshiValue :=
     cxGrid1DBTableView1.DataController.GetValue(J, cxGrid1DBTableView1.FindItemByName('cxGrid1DBTableView1Column1').Index);
     LinshiValue := Trim(LinshiValue);
     if LinshiValue <> '' then
       Linshistr := Linshistr + '|' + LinshiValue;
   end;
   if Linshistr <> '' then Linshistr := Copy(Linshistr, 2, Length(Linshistr) - 1);


     //LinshiValue := Trim(GetRowValue(GetRowInfo(J),FieldByName('TieBaMing').Index));
     //ShowMessage(VarToStr(cxGrid1DBTableView1.DataController.GetValue(J, 0)));  //排序过滤后取值异常

     //ShowMessage();  //排序过滤后取值正常



  TiebaList := Linshistr;
  Self.ModalResult := mrOk;
end;

procedure TFormChooseBaname.RzButtonSearchClick(Sender: TObject);
var
  WhereSqlstri: string;
  legh, I: Integer;
  Linshtr, Trimstr: string;
begin
  RzPanelLoading.Visible := True;
  delay(1000);
  UniQuery1.DisableControls;
  try
    //QuerySqlInuni(UniQuery1, 'select * from TieBa_BasicInfo ORDER BY FollowerCount asc;');
    //UniQuery1.Filtered := False;

    WhereSqlstri := '1=1 ';
    Trimstr := Trim(RzEditName.Text);
    if Trimstr <> '' then
    begin
      legh := Length(Trimstr);
      if RzCheckBoxHighVague.Checked and (legh > 1) then
      begin
        Linshtr := '';
        for I := 1 to legh do
        begin
          Linshtr := Linshtr + '%' + Trimstr[I];
        end;
        Linshtr := Linshtr + '%';
        WhereSqlstri := WhereSqlstri + ' and TieBaMing like ''' + Linshtr + '''';
      end
      else
      begin
        WhereSqlstri := WhereSqlstri + ' and TieBaMing like ''%' + Trimstr + '%''';
      end;
    end;
    if StrToInt64Def(Trim(RzEditFollowStart.Text), 0) > 0 then
      WhereSqlstri := WhereSqlstri + ' and FollowerCount>=' + Trim(RzEditFollowStart.Text);
    if StrToInt64Def(Trim(RzEditFollowEnd.Text), 0) > 0 then
      WhereSqlstri := WhereSqlstri + ' and FollowerCount<=' + Trim(RzEditFollowEnd.Text);
    if StrToInt64Def(Trim(RzEditPostcStart.Text), 0) > 0 then
      WhereSqlstri := WhereSqlstri + ' and AllPostCount>=' + Trim(RzEditPostcStart.Text);
    if StrToInt64Def(Trim(RzEditPostcEnd.Text), 0) > 0 then
      WhereSqlstri := WhereSqlstri + ' and AllPostCount<=' + Trim(RzEditPostcEnd.Text);

    QuerySqlInuni(UniQuery1, 'select * from TieBa_BasicInfo where ' + WhereSqlstri +
    ' ORDER BY FollowerCount asc limit ' + limitC);
    //UniQuery1.Filter := WhereSqlstri;
    //UniQuery1.Filtered := False;
  finally
    UniQuery1.EnableControls;
    RzPanelLoading.Visible := False;
  end;
end;

procedure TFormChooseBaname.Timer1Timer(Sender: TObject);
begin
  Timer1.Enabled := False;
  RzPanelLoading.Visible := True;
  UniQuery1.DisableControls;
  try
    //UniQuery1.Filtered := False;
    QuerySqlInuni(UniQuery1, 'select * from TieBa_BasicInfo ORDER BY FollowerCount asc limit ' + limitC);
    //UniQuery1.Filtered := False;
  finally
    UniQuery1.EnableControls;
    RzPanelLoading.Visible := False;
  end;
end;

end.
